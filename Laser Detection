import cv2
import numpy as np

cap = cv2.VideoCapture(0)
cap.set(3, 1280)
cap.set(4, 720)

# Crear ventanas redimensionables
cv2.namedWindow("Mask", cv2.WINDOW_NORMAL)
cv2.namedWindow("Laser Tracking", cv2.WINDOW_NORMAL)
cv2.resizeWindow("Mask", 640, 360)          # más pequeñas
cv2.resizeWindow("Laser Tracking", 640, 360)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    lower_red1 = np.array([0, 120, 150])
    upper_red1 = np.array([10, 255, 255])
    lower_red2 = np.array([160, 120, 150])
    upper_red2 = np.array([179, 255, 255])

    mask1 = cv2.inRange(hsv, lower_red1, upper_red1)
    mask2 = cv2.inRange(hsv, lower_red2, upper_red2)
    mask = cv2.add(mask1, mask2)
    mask = cv2.GaussianBlur(mask, (9, 9), 0)

    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    if contours:
        c = max(contours, key=cv2.contourArea)
        area = cv2.contourArea(c)
        if area > 5:
            (x, y), radius = cv2.minEnclosingCircle(c)
            center = (int(x), int(y))
            cv2.circle(frame, center, int(radius)+10, (0, 255, 0), 2)
            cv2.putText(frame, f"Laser: ({int(x)}, {int(y)})", (int(x)+15, int(y)-10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)
            print(f"Laser detectado en: ({int(x)}, {int(y)})")

    cv2.imshow("Mask", mask)
    cv2.imshow("Laser Tracking", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
